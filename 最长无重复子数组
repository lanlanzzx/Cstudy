
/**
 *
 * @param arr int整型一维数组 the array
 * @param arrLen int arr数组长度
 * @return int整型
 */
//step 1：构建一个哈希表，用于统计数组元素出现的次数。
//step 2：窗口左右界都从数组首部开始，每次窗口优先右移右界，并统计进入窗口的元素的出现频率。
//step 3：一旦右界元素出现频率大于1，就需要右移左界直到窗口内不再重复，将左边的元素移除窗口的时候同时需要将它在哈希表中的频率减1，保证哈希表中的频率都是窗口内的频率。
//step 4：每轮循环，维护窗口长度最大值。
int maxLength(int* arr, int arrLen ) {
    // write code here
    int* hash = (int*)calloc(100000 + 1, sizeof(int));
    int left = 0;
    int right = 0;
    int max = 0;
    int maxvalue = 0;
    while (right < arrLen) {
        if (hash[arr[right]] == 0) {
            max++;
            hash[arr[right]] = 1;
            right++;
        } else {
            int leftpre = left;
            for (int j = left; j < right; j++) {
                if (arr[j] == arr[right]) {
                    left = j;
                    //printf("%d ",left);
                    break;
                }
            }
            left = left + 1;
            //right=left;
            // if(max>maxvalue)
            //    maxvalue=max;
            max = right - left;
            //printf("%d ",max);
            for (int i = leftpre; i < left; i++) {
                hash[arr[i]] = 0;
            }
        }
        if (max > maxvalue)
            maxvalue = max;
        printf("%d ", maxvalue);
    }
    return maxvalue;
}
