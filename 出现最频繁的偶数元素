int cnp(const void * e1,const void *e2){
    return *(int *)e1 - *(int *)e2;
}
int mostFrequentEven(int* nums, int numsSize){
    int * res =(int *)malloc(sizeof(int)*numsSize);
    int count=0;
    for(int i=0;i<numsSize;i++)
    {
      if(nums[i]%2==0){
          res[count++]=nums[i];
      }
    }
    if(count==0){
        return -1;
    }
    if(count==1){
        return res[count-1];
    }
    qsort(res,count,sizeof(int),cnp);
    int max_num=res[0];
    int max=1;
    int count1=1;

    for(int j=1;j<count;j++){
            if(res[j]==res[j-1]){
                count1++;
            
            if(count1>max){
                max=count1;
                max_num=res[j];
            }
            }
            else{
                count1=1;
                if(count1>max){
                max=count1;
                max_num=res[j];
            }
            }
    }
    return max_num;

}
