/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 
 * @param numbers int整型一维数组 
 * @param numbersLen int numbers数组长度
 * @param target int整型 
 * @return int整型一维数组
 * @return int* returnSize 返回数组行数
 */
 int int_cmp(const void* e1, const void* e2)
{
    return *(int*)e1 - *(int*)e2;//升序排序
}
int* twoSum(int* numbers, int numbersLen, int target, int* returnSize ) {
    // write code here
     * returnSize=2;
    int * arr=(int *)malloc(sizeof(int)*2);
    int *hash=(int *)calloc(target+21,sizeof(int));
    int i=0;
    //构建一个hash表 
    //遍历数组 如果target-numbers[i]的值不在hash表中。则将numbers[i]它放进hash表里面去。
    //如果在hash表中 则返回答案 
    //注意数组的值中含有负数。
    for(i=0;i<numbersLen;i++){
        if(numbers[i]<=target+10){
            if(hash[target-numbers[i]+10]==0){
                hash[numbers[i]+10]=i+1;
            }
            else{
                arr[0]=hash[target-numbers[i]+10];
                arr[1]=i+1;
                return arr;
            }
        }
            
    }
    return arr;
}
    // for(int j=0;j<numbersLen;j++){
    //     if(numbers[j]<=target)
    //         {
    //             if(hash[target-numbers[j]]!=0){
    //                 if(hash[numbers[j]]>hash[target-numbers[j]]){
    //                     arr[1]=hash[numbers[j]];
    //                     arr[0]=hash[target-numbers[j]];
    //                     return arr;
    //                 }
    //                 if(hash[numbers[j]]<hash[target-numbers[j]])
    //                 {
    //                     arr[0]=hash[numbers[j]];
    //                     arr[1]=hash[target-numbers[j]];
    //                     return arr;
    //                 }
    //             }
    //         }
    // }
    //return arr;

    // int *brr=(int *)malloc(sizeof(int)*numbersLen);
    // int k=0;
    // for(k=0;k<numbersLen;k++){
    //    brr[k]=numbers[k];
    // }
    // qsort(numbers, numbersLen, sizeof(numbers[0]), int_cmp);
    // int i=0;
    // int j=numbersLen-1;
    // while(i<j){
    //     if((numbers[i]+numbers[j])==target){

    //         arr[0]=numbers[i];
    //         arr[1]=numbers[j];
    //         //return arr;
    //     }
    //     else if ((numbers[i]+numbers[j])>target){
    //         j--;
    //     }
    //     else{
    //         i++;
    //     }
    // }
    // int kk=0;
    // for(kk=0;kk<numbersLen;kk++){
    //     if(brr[kk]==arr[0])
    //        arr[0]=kk+1;
    //     if(brr[kk]==arr[1])
    //        arr[1]=kk+1;
    // }
    // qsort(arr, 2, sizeof(arr[0]), int_cmp);
    // return arr;
