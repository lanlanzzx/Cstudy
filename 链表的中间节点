/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 * };
 */
/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 
 * @param head ListNode类 
 * @return ListNode类
 */
struct ListNode* middleNode(struct ListNode* head ) {
    // write code here
    //第一种方法 利用快慢指针寻找链表的中间节点 快指针一次走两步 当快指针走到头时 慢指针走到链表的一半
    struct ListNode*slow=head;
    struct ListNode*fast=head;
    //while(fast && fast->next)就是为了保证不会出现nullnull->next而出错
    while(fast && fast->next){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
    //第二种方法比较常规  根据链表的长度   手动计算链表一半的长度 来寻找链表的中间节点
    // int count=0;
    // struct ListNode*p1=head;
    // struct ListNode*p2=head;
    // while(p1){
    //     count++;
    //     p1=p1->next;
    // }
    // printf("%d ",count);
    // int mid=count/2+1;
    // for(int j=1;j<mid;j++){
    //          p2=p2->next;
    // }
    // return p2;
}
