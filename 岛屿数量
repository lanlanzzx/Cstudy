
/**
 * 判断岛屿数量
 * @param grid char字符型二维数组
 * @param gridRowLen int grid数组行数
 * @param gridColLen int* grid数组列数
 * @return int整型
 */
 //终止条件： 进入某个元素修改其值为0后，遍历四个方向发现周围都没有1，那就不用继续递归，返回即可，或者递归到矩阵边界也同样可以结束。
返回值： 每一级的子问题就是把修改后的矩阵返回，因为其是函数引用，也不用管。
本级任务： 对于每一级任务就是将该位置的元素置为0，然后查询与之相邻的四个方向，看看能不能进入子问题。

void dfs(char** grid, int i, int j,int m,int n) {
    if(i<0||i>=m||j<0||j>=n||grid[i][j]=='0')
       return;
     //grid[i][j]=='0'这一步很关键。如果等于字符0 不退出。再进行深度遍历的话  是在浪费
    grid[i][j]='0';
    //if (i - 1 >= 0) {
       dfs(grid,i-1,j,m,n);
    //}
    //if (i + 1 < m) {
        dfs(grid,i+1,j,m,n);
   // }
   // if (j - 1 >= 0) {
       dfs(grid,i,j-1,m,n);
    //}
    //if (j + 1 < n) {
        dfs(grid,i,j+1,m,n);

    //}

}
int solve(char** grid, int gridRowLen, int* gridColLen ) {
    // write code here
    int m;
    int n;
    //printf("%d %d",gridRowLen,*gridColLen);
    m = gridRowLen;
    n = *gridColLen;
    //printf("%d %d",m,n);
    int count = 0;
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (grid[i][j] == '1') {
                count++;
                //printf("%d ",count);
               dfs(grid,i,j,m,n);

            }
        }
    }
    return count;
}
