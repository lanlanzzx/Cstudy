int cnp(const void *e1,const void *e2){
    return *(int *)e1-*(int *)e2;
}
//取中位数  可保证较小
int minOperations(int** grid, int gridSize, int* gridColSize, int x){
    int* ans=(int *)malloc(sizeof(int)*(gridSize*(*gridColSize)));
    int count=0;
    for(int i=0;i<gridSize;i++){
        for(int j=0;j<*gridColSize;j++){
                    ans[count++]=grid[i][j];
        }
    }
    qsort(ans,count,sizeof(int),cnp);
    int mid=count/2;
    int ans1=0;
    //int ans2=0;
    for(int i=0;i<mid;i++){
        //printf("%d",(ans[mid-1]-ans[i])%x);
        if((ans[mid]-ans[i])%x!=0){
            //printf("%d",(ans[i]-ans[mid-1])%x);
            return -1;
        }
        ans1+=(ans[mid]-ans[i])/x;
        //printf("%d",ans1);printf("%d",ans[mid-1]);
    }
    for(int i=mid+1;i<count;i++){
        //printf("%d",(ans[i]-ans[mid-1])%x);
        if((ans[i]-ans[mid])%x!=0){
            //printf("%d",(ans[i]-ans[mid-1])%x);
            return -1;
        }
        ans1+=(ans[i]-ans[mid])/x;
        //printf("%d",ans1);
    }
    return ans1;


}
