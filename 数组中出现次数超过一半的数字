
/**
 *
 * @param numbers int整型一维数组
 * @param numbersLen int numbers数组长度
 * @return int整型
 */
int MoreThanHalfNum_Solution(int* numbers, int numbersLen ) {
    // write code here
    //1.创建了一个以元素值为数组下标 来存储值的大小 
    //  malloc在开辟空间的时候没有进行初始化 calloc在开辟空间的时候进行了初始化 注意
    // int* array = (int*)calloc(10001,sizeof(int));
    // // printf("%d",array[0]);
    // //int array[10001]={0};
    // for (int i = 0; i < numbersLen; i++) {
    //     int m = numbers[i];
    //     array[m]++;
    //     if (array[m] > (numbersLen / 2)) {
    //         return m;
    //     }
    // }
    // return 0;
    //2.摩尔投票法
    // int ans=numbers[0];
    // int count=0;
    // int i=0;
    // for(i=0;i<numbersLen;i++){
    //     if(ans!=numbers[i]){
    //           count--;
    //     }
    //     else{
    //         count++;
    //     }
    //     if(count==0){
    //         ans=numbers[i];
    //         count=1;
    //     }
    // }
    // return ans;
    //3.随机数法
    // srand(time(NULL));
    // int count=0;
    // int num=0;
    // while(count<=numbersLen/2){
    //     count=0;
    //     int n=rand()%numbersLen;
    //     num=numbers[n];
    //     for(int i=0;i<numbersLen;i++){
    //         if(num==numbers[i]){
    //             count++;
    //         }
    //     }
    // }
    // return num;
    



}
